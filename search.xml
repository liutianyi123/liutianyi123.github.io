<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML5入门</title>
      <link href="/2020/08/15/HTML5%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/15/HTML5%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML简介导读"><a href="#HTML简介导读" class="headerlink" title="HTML简介导读"></a>HTML简介导读</h2><h3 id="1-网页"><a href="#1-网页" class="headerlink" title="1.网页"></a>1.网页</h3><h4 id="1-1什么是网页"><a href="#1-1什么是网页" class="headerlink" title="1.1什么是网页"></a>1.1什么是网页</h4><p>网页是构成网站的基本元素，通常是HTML文件。</p><h4 id="1-2什么是HTML"><a href="#1-2什么是HTML" class="headerlink" title="1.2什么是HTML"></a>1.2什么是HTML</h4><p>HTML指的是超文本标记语言</p><ul><li><p>可以加入图片，视频等（超越了文本限制）</p></li><li><p>可以从一个文件跳转至另一个文件（超级链接文本）</p></li></ul><h3 id="2-常用浏览器"><a href="#2-常用浏览器" class="headerlink" title="2.常用浏览器"></a>2.常用浏览器</h3><h4 id="2-1浏览器内核"><a href="#2-1浏览器内核" class="headerlink" title="2.1浏览器内核"></a>2.1浏览器内核</h4><p>浏览器内核负责读取网页内容，整理讯息，显示页面</p><h3 id="3-Web标准"><a href="#3-Web标准" class="headerlink" title="3.Web标准"></a>3.Web标准</h3><h4 id="3-1Web标准的构成"><a href="#3-1Web标准的构成" class="headerlink" title="3.1Web标准的构成"></a>3.1Web标准的构成</h4><p>主要包括结构，表现，行为</p><ul><li>结构：网页元素的整理分类（HTML）</li><li>表现：设置网页的外观样式（CSS）</li><li>行为：网页交互（Javascript)</li></ul><h2 id="HTML标签导读（上）"><a href="#HTML标签导读（上）" class="headerlink" title="HTML标签导读（上）"></a>HTML标签导读（上）</h2><h3 id="1-HTML语法规范"><a href="#1-HTML语法规范" class="headerlink" title="1.HTML语法规范"></a>1.HTML语法规范</h3><h4 id="1-1基本语法规范"><a href="#1-1基本语法规范" class="headerlink" title="1.1基本语法规范"></a>1.1基本语法规范</h4><ol><li><p>HTML标签由尖括号包围关键词，例如<html></html></p></li><li><p>HTML标签通常成对出现，例如<html>和</html>,我们称为双标签</p></li><li><p>极少情况下会出现单个标签，例如<br>,我们称为单标签</p></li></ol><h4 id="1-2标签关系"><a href="#1-2标签关系" class="headerlink" title="1.2标签关系"></a>1.2标签关系</h4><p>双标签关系可以分为两类：包含关系和并列关系</p><p>包含关系：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>并列关系：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="2-基本结构标签"><a href="#2-基本结构标签" class="headerlink" title="2.基本结构标签"></a>2.基本结构标签</h3><h4 id="2-1第一个HTML"><a href="#2-1第一个HTML" class="headerlink" title="2.1第一个HTML"></a>2.1第一个HTML</h4><table><thead><tr><th>内容</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>&lt; html &gt; &lt; /html &gt;</td><td>HTML标签</td><td>页面中最大的标签也叫根标签</td></tr><tr><td>&lt; head &gt; &lt; /head &gt;</td><td>文档的头部</td><td>必须在其中设置title标签</td></tr><tr><td>&lt; title &gt; &lt; /title &gt;</td><td>文档的标题</td><td>让页面拥有网页标题</td></tr><tr><td>&lt; body &gt; &lt; /body &gt;</td><td>文档的主体</td><td>页面内容基本都放在其中</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       你好！！！！   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3-网页开发工具"><a href="#3-网页开发工具" class="headerlink" title="3.网页开发工具"></a>3.网页开发工具</h3><h4 id="3-1文档类型声明标签"><a href="#3-1文档类型声明标签" class="headerlink" title="3.1文档类型声明标签"></a>3.1文档类型声明标签</h4><p><strong>&lt;!DOCTYPE&gt;</strong> 文档类型声明，告诉浏览器用哪种HTML版本来显示网页。</p><h4 id="3-2lang语言种类"><a href="#3-2lang语言种类" class="headerlink" title="3.2lang语言种类"></a>3.2lang语言种类</h4><p>①en为英语</p><p>②zh-CN为中文</p><h4 id="3-3字符集"><a href="#3-3字符集" class="headerlink" title="3.3字符集"></a>3.3字符集</h4><p>在<strong><head></head></strong>标签内，通过<strong><meta></strong>标签的<strong>charset</strong>属性规定使用哪种编码</p><h4 id="3-4总结"><a href="#3-4总结" class="headerlink" title="3.4总结"></a>3.4总结</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>        <span class="token comment" spellcheck="true">&lt;!--采用HTML5版本显示网页--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--这是一个中文网页--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--UTF-8也被称作万国码，用其保存文字--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>利用vscode创建的第一个页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    我很快乐！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="4-HTML常用标签"><a href="#4-HTML常用标签" class="headerlink" title="4.HTML常用标签"></a>4.HTML常用标签</h3><h4 id="4-1标签语义"><a href="#4-1标签语义" class="headerlink" title="4.1标签语义"></a>4.1标签语义</h4><p>指的是标签的含义，即这个标签是用来干嘛的</p><h4 id="4-2标题标签"><a href="#4-2标题标签" class="headerlink" title="4.2标题标签"></a>4.2标题标签</h4><p>标签语义：作为标题使用，重要性递减</p><p>特点：</p><ul><li><p>文字加粗，字号变大</p></li><li><p>一个标题独占一行</p></li></ul><p>其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><h4 id="4-3段落和换行标签"><a href="#4-3段落和换行标签" class="headerlink" title="4.3段落和换行标签"></a>4.3段落和换行标签</h4><p><strong>&lt; p &gt;</strong>标签用于定义段落</p><p>特点：</p><ul><li><p>文本在一个段落中会根据浏览器窗口大小自动换行</p></li><li><p>段落之间有空隙</p></li></ul><p><strong>&lt; br/ &gt;</strong>用于强制换行显示</p><p>也可以写成&lt; br &gt;</p><p>特点：</p><ul><li>单标签</li><li>只是开始新的一行，不像段落会插入一些垂直间距</li></ul><h4 id="4-4文本格式化标签"><a href="#4-4文本格式化标签" class="headerlink" title="4.4文本格式化标签"></a>4.4文本格式化标签</h4><p>①加粗<strong>&lt; strong &gt;&lt; /strong &gt;或&lt; b &gt;&lt; /b &gt;</strong></p><p>②倾斜<strong>&lt; em &gt;&lt; /em &gt;或&lt; i &gt;&lt; /i &gt;</strong></p><p>③删除线<strong>&lt; del &gt;&lt; /del &gt;或&lt; s &gt;&lt; /s &gt;</strong></p><p>④下划线<strong>&lt; ins &gt;&lt; /ins &gt;或&lt; u &gt;&lt; /u &gt;</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>的标签    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>的标签    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>倾斜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>的标签    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>倾斜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>的标签    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span>的标签    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">></span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">></span></span>的标签    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span>的标签    我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span>的标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="4-5-lt-div-gt-和-lt-span-gt-标签"><a href="#4-5-lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="4.5&lt; div &gt;和&lt; span &gt;标签"></a>4.5&lt; div &gt;和&lt; span &gt;标签</h4><p>并没有语义就是一个盒子用来装内容</p><p>特点：</p><ul><li>&lt; div &gt;标签用来布局，一个只占一行</li><li>&lt; span &gt;标签用来布局，一行可以多个&lt; span &gt;</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是一个div标签单独占一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是一个div标签单独占一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>搜狐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>新浪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="4-6图像标签和路径"><a href="#4-6图像标签和路径" class="headerlink" title="4.6图像标签和路径"></a>4.6图像标签和路径</h4><h5 id="1-图像标签"><a href="#1-图像标签" class="headerlink" title="1.图像标签"></a>1.图像标签</h5><p>&lt; img &gt;标签用于定义HTML页面中的图像</p><pre class=" language-html"><code class="language-html">&lt; img src="图像URL"/></code></pre><p>src 是 &lt; img &gt;标签的必须属性，用于指定图像文件的路径和文件名</p><p>图像标签其他属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>图像标签的使用：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>alt 替换文本 图像显示不出来用文本代替：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>11.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片加载失败<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>title 提示文本 鼠标放到图像上提示的文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片加载失败<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是一张图片<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>width 给图像设置宽度：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片加载失败<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是一张图片<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>256<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>width 给图像设置高度：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片加载失败<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是一张图片<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>144<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!--一般width和height只修改一个之后让它自己等比例缩放就行了--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>border 给图像设置边框：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片加载失败<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是一张图片<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>144<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>图像标签的注意点：</p><p>①图像标签可以拥有多个属性，必须写在标签后面</p><p>②属性之间不分先后顺序，属性之间用空格分开</p><p>③属性采用键值对的格式</p><p>④src属性必须要写</p><p>⑤alt是替换，title是提示</p><h5 id="2-路径"><a href="#2-路径" class="headerlink" title="2.路径"></a>2.路径</h5><p>路径可分为：</p><p>1.相对路径</p><p>图片相对于HTML页面的位置</p><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像文件位于HTML文件同一级 如&lt; img src=”baidui.gif”/&gt;</td></tr><tr><td>下一级路径</td><td>/</td><td>图像文件位于HTML文件下一级 如&lt; img src=”images/baidui.gif”/&gt;</td></tr><tr><td>上一级路径</td><td>../</td><td>图像文件位于HTML文件上一级 如&lt; img src=”../baidui.gif”/&gt;</td></tr></tbody></table><p>2.绝对路径</p><p>从盘符开始的绝对路径或是网络地址。</p><p>例如G:\Blog\source_posts和<a href="https://edu-image.nosdn.127.net/3310f128e53b406f94400f7ae6046db2.png?imageView&amp;quality=100" target="_blank" rel="noopener">https://edu-image.nosdn.127.net/3310f128e53b406f94400f7ae6046db2.png?imageView&amp;quality=100</a></p><h4 id="4-7超链接标签"><a href="#4-7超链接标签" class="headerlink" title="4.7超链接标签"></a>4.7超链接标签</h4><p>在HTML标签中,<strong>&lt; a &gt;</strong>标签用于定义超链接，作用是从一个页面链接到另一个页面</p><h5 id="1-语法格式"><a href="#1-语法格式" class="headerlink" title="1.语法格式"></a>1.语法格式</h5><pre class=" language-html"><code class="language-html">&lt; a href="跳转目标" target="目标窗口弹出方式">文本或图像 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目标的url地址（必须属性）</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式 其中_ self为默认值，_ blank为在新窗口中打开</td></tr></tbody></table><h5 id="2-链接分类"><a href="#2-链接分类" class="headerlink" title="2.链接分类"></a>2.链接分类</h5><p>①外部链接，“http://……”</p><p>②内部链接，网站内部页面之间的相互链接。直接链接内部页面名称即可</p><p>③空链接，没有确定链接目标，&lt; a href=“#”&gt;首页&lt; /a &gt;</p><p>④下载链接，href里面地址是一个压缩包或文件，会下载这个</p><p>⑤网页元素的链接，图片，视频，文本，表格都可以添加超链接</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>1.外部链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>腾讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>2.内部链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>内部页面名称<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内部链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>3.空链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>4.下载链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.zip<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>5.网页元素链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>⑥锚点链接，点击链接可以快速定位到页面中的某个位置</p><ul><li>在链接文本的 href  属性中，设置属性值为<strong>#名字</strong>的形式，如&lt; a href=“#two”&gt;第二集&lt; /a&gt;</li><li>找到目标位置标签，在里面添加一个id属性 = 刚才的名字，如&lt; h3 id =“two”&gt;第二集介绍&lt; /h3&gt;</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>1.早年经历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>2.演绎经历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>3.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#live<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人生活<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>早年经历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>演绎经历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>live<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人生活<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="4-8水平线标签"><a href="#4-8水平线标签" class="headerlink" title="4.8水平线标签"></a>4.8水平线标签</h4><p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<strong>&lt; hr /&gt;</strong>就是创建横跨网页水平线的标签。其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>是单标签</code></pre><p> 在网页中显示默认样式的水平线。</p><h3 id="5-HTML中的注释和特殊字符"><a href="#5-HTML中的注释和特殊字符" class="headerlink" title="5.HTML中的注释和特殊字符"></a>5.HTML中的注释和特殊字符</h3><h4 id="5-1注释"><a href="#5-1注释" class="headerlink" title="5.1注释"></a>5.1注释</h4><p>语法格式</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--注释内容--></span></code></pre><p>快捷键：Ctrl  +  /</p><p><em>推荐：</em></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Comment Text --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><em>不推荐：</em></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Comment Text --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Comment Text --></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="5-2特殊字符"><a href="#5-2特殊字符" class="headerlink" title="5.2特殊字符"></a>5.2特殊字符</h4><table><thead><tr><th>字符</th><th>代码</th></tr></thead><tbody><tr><td>空格</td><td>&amp; nbsp;</td></tr><tr><td>&lt;</td><td>&amp; lt;</td></tr><tr><td>&gt;</td><td>&amp; gt;</td></tr></tbody></table><p>其余如果需要查阅即可</p><h2 id="HTML标签导读（下）"><a href="#HTML标签导读（下）" class="headerlink" title="HTML标签导读（下）"></a>HTML标签导读（下）</h2><h3 id="1-表格标签"><a href="#1-表格标签" class="headerlink" title="1.表格标签"></a>1.表格标签</h3><h4 id="1-1表格的主要作用"><a href="#1-1表格的主要作用" class="headerlink" title="1.1表格的主要作用"></a>1.1表格的主要作用</h4><p>它不是用来布局页面的，而是用来<strong>展示数据</strong>的。</p><h4 id="1-2表格的基本语法"><a href="#1-2表格的基本语法" class="headerlink" title="1.2表格的基本语法"></a>1.2表格的基本语法</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><ul><li>table用于定义一个表格标签。</li><li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li><li>td 用于定义表格中的单元格，必须嵌套在&lt; tr &gt;&lt; /tr &gt;标签中。</li><li>字母 td 指表格数据（table data），即数据单元格的内容。</li></ul><h4 id="1-3表头单元格标签"><a href="#1-3表头单元格标签" class="headerlink" title="1.3表头单元格标签"></a>1.3表头单元格标签</h4><p>作用：一般表头单元格位于表格的第一行或第一列，并且文本加粗居中</p><p>语法：只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p><h4 id="1-4表格的属性"><a href="#1-4表格的属性" class="headerlink" title="1.4表格的属性"></a>1.4表格的属性</h4><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left,right,center</td><td>对齐方式</td></tr><tr><td>border</td><td>1，“”</td><td>规定是否有边框，默认“”无边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>边框与内容之间距离</td></tr><tr><td>cellspacing</td><td>像素值</td><td>单元格之间距离</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格宽度</td></tr><tr><td>height</td><td>像素值或百分比</td><td>规定表格高度</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>刘德华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>55<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>郭富城<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>52<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张学友<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>58<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>黎明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>刘晓庆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>63<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h4 id="1-5表头结构标签"><a href="#1-5表头结构标签" class="headerlink" title="1.5表头结构标签"></a>1.5表头结构标签</h4><p>对于比较复杂的表格，可以将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。</p><p><strong>注意：</strong></p><ol><li>&lt; thead &gt;&lt; /thead &gt;：用于定义表格的头部。用来放标题之类的东西。&lt; thead &gt; 内部必须拥有 &lt; tr &gt; 标签！</li><li>&lt; tbody &gt;&lt; /tbody &gt;：用于定义表格的主体。放数据本体 。</li><li>&lt; tfoot &gt;&lt; /tfoot &gt;放表格的脚注之类。</li><li>以上标签都是放到table标签中。</li></ol><h4 id="1-6合并单元格"><a href="#1-6合并单元格" class="headerlink" title="1.6合并单元格"></a>1.6合并单元格</h4><p>两种方式：</p><ul><li>跨行合并：rowspan=”合并单元格的个数</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><p>目标单元格：<br>跨行：最上侧单元格为目标单元格，写合并代码<br>跨列：最左侧单元格为目标单元格，写合并代码</p><p>步骤：</p><ol><li>先确定是跨行还是跨列合并</li><li>根据 先上 后下   先左  后右的原则找到目标单元格    然后写上 合并方式 还有 要合并的单元格数量  比如 ： &lt; td colspan=”3”&gt;   &lt; /td &gt;</li><li>删除多余的单元格 单元格     </li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>249<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h3 id="2-列表标签"><a href="#2-列表标签" class="headerlink" title="2.列表标签"></a>2.列表标签</h3><h4 id="2-1无序列表"><a href="#2-1无序列表" class="headerlink" title="2.1无序列表"></a>2.1无序列表</h4><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>注意点：</p><ul><li>&lt; ul &gt;&lt; /ul &gt;中只能嵌套&lt; li &gt;&lt; /li &gt;</li><li>&lt; li &gt;与&lt; /li &gt;之间可以容纳所有元素。</li></ul><h4 id="2-2有序列表"><a href="#2-2有序列表" class="headerlink" title="2.2有序列表"></a>2.2有序列表</h4><p>有序列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>所有特性基本与ul 一致。  但是实际中比 无序列表 用的少很多。</p><h4 id="2-3自定义列表"><a href="#2-3自定义列表" class="headerlink" title="2.3自定义列表"></a>2.3自定义列表</h4><p>常用于对术语或名词进行解释和描述，自定义列表的列表项前没有任何项目符号。其基本语法如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><p>注意：</p><ul><li>&lt; dl &gt;&lt; dl/ &gt;之间只能有 dt 和 dd</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HtML5 </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语长难句</title>
      <link href="/2020/08/15/%E8%8B%B1%E8%AF%AD%E9%95%BF%E9%9A%BE%E5%8F%A5/"/>
      <url>/2020/08/15/%E8%8B%B1%E8%AF%AD%E9%95%BF%E9%9A%BE%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="简单句"><a href="#简单句" class="headerlink" title="简单句"></a>简单句</h2><h3 id="1-什么是英语的句子："><a href="#1-什么是英语的句子：" class="headerlink" title="1.什么是英语的句子："></a>1.什么是英语的句子：</h3><p>英语句子必须具备主谓结构，主语一定是谓语动作的发出者，如果有宾语，宾语一定是谓语动作的承受者。</p><h3 id="2-英语句子的基本结构："><a href="#2-英语句子的基本结构：" class="headerlink" title="2.英语句子的基本结构："></a>2.英语句子的基本结构：</h3><p>① 主谓</p><p>② 主谓宾</p><p>谓语：实义动词</p><p>③ 主谓表（主系表）</p><ul><li><p>谓语：系动词</p></li><li><p>be</p></li><li><p>感官动词：look(=seem=appear),smell(n.气味),taste(n.喜爱，喜好),sound(n.声音,adj.甜美),feel</p></li><li><p>变化：become,get,turn(turn yelllow),grow,fall</p></li><li><p>保持：keep,stay,remain,stand</p></li></ul><p>④ 主谓双宾</p><p>⑤ 主谓宾宾补</p><p>两者区别：在两宾语之间加入be动词，读起来意思是对就是主谓宾宾补，不对就是双宾</p><h3 id="3-句子的成分（词性问题）："><a href="#3-句子的成分（词性问题）：" class="headerlink" title="3.句子的成分（词性问题）："></a>3.句子的成分（词性问题）：</h3><h4 id="①-谓语："><a href="#①-谓语：" class="headerlink" title="① 谓语："></a>① 谓语：</h4><ul><li>谓语的成分：有时态的实义动词（词组）或系动词充当谓语</li><li>动词能不能多？</li></ul><p>注意是可以是词组：</p><p>eg.Can l have a look at your phone?</p><p>eg.We need take advantage of the Internet.</p><p>绝对不能，只能有一个动词并充当谓语，多余的动词全部变成非谓语动词。</p><p>谓语只能是动词</p><p>动词只能做谓语</p><p>把所有不做谓语的动词变成不是动词即（非\谓语动词）(主动:ving,被动:ved,目的:to do)</p><p>练习：</p><p>长江流经不同的生态体系，是众多濒危物种的栖息地，灌溉了中国1/5的土地</p><p>翻译：Yangzi River flowing through diverse ecological systems, keeps the home of a sea of endangered species, irrigating Chinese 1/5 land.</p><p>我爱你，你爱我</p><p>翻译：I loving you,you love me.</p><p>冬天来了，春天就不远了</p><p>翻译：Winter approaching, Spring will be around the corner.（独立主格，两个不同主语）</p><p>我是一个老师，我喜欢唱歌</p><p>翻译：Being a teacher, I have passion for singing songs.</p><ul><li><p>一句话动词能不能少：不能，当一句话需要动词而又没有动词时加be动词，并且它没有意思</p></li><li><p>谓语的总结：一句话当中有且只有一个有时态的实义动词或系动词的存在并且充当谓语。</p></li></ul><h4 id="②-主语"><a href="#②-主语" class="headerlink" title="② 主语"></a>② 主语</h4><ul><li><p>主语的成分：名词，代词，非谓语动词，从句（引导词+句子）</p></li><li><p>一句话中主语能不能少：不能。</p></li><li><p>一句话没有主语怎么办？ </p></li></ul><p>1）加it：必须与天气，温度，时间有关</p><p>It feels exceedingly hot in the cabin.</p><p>2）There be句型，听到“有”的时候使用</p><p>There exist/seem/remain a host of undergraduates being fascinated with me</p><p>3) 被动：当听到一句话没有主语或人称代词做主语都可以考虑被动</p><p>Eg.Persistence must be pointed out outstandingly crucial.</p><p>Eg.Overfishing is claimed more than fearful by an increasing amount of professors</p><p>无被动：动词后有介词无被动，系动词无被动，have表达“有”的意思时无被动</p><p>4) 人称代词做主语：l you we,最好不要用</p><p>Eg.如果有梦想，就应该会成功</p><p>​    If there exists a dream, glories are supposed to be achieved. </p><h4 id="③-宾语"><a href="#③-宾语" class="headerlink" title="③ 宾语"></a>③ 宾语</h4><ul><li>名词，代词，非谓语动词，从句可以充当宾语</li></ul><h4 id="④表语"><a href="#④表语" class="headerlink" title="④表语"></a>④表语</h4><ul><li>名词，代词，非谓语动词，从句，形容词，介词短语可以充当表语</li></ul><p>例子：我喜欢在重庆</p><p>I like being in ChongQing.</p><p>l like ChongQing</p><h3 id="4-简单句的考点分析"><a href="#4-简单句的考点分析" class="headerlink" title="4.简单句的考点分析"></a>4.简单句的考点分析</h3><ul><li><h4 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h4></li></ul><p>① 所有写不来的长难句都先写成简单句，一定要保证语法正确</p><p>② 写不来的单词都写成自己会的词汇</p><ul><li><h4 id="长难句分析"><a href="#长难句分析" class="headerlink" title="长难句分析"></a>长难句分析</h4></li></ul><p>第一步就是找动词（即谓语），从而找到主谓宾。如果一句话找到了多个动词，就确定主句的谓语动词（前面没有引导词的动词就是主句的谓语动词）</p><h3 id="5-各种思考和踩坑"><a href="#5-各种思考和踩坑" class="headerlink" title="5.各种思考和踩坑"></a>5.各种思考和踩坑</h3><p>① 关于情态动词</p><p>情态动词不能单独出现，后面必须加实义动词或系动词一起构成谓语。</p><p>② His smile is like a flower</p><p>这句话中like是介词</p><p>③ 哥哥的头上有一朵花</p><p>这句话其实并没有主语 ’on the head of the brother’ 是介词短语不能作主语，作主语的只有名词，代词，非谓语动词，从句。</p><p>④ 被动语态和时态</p><p>时态是表明动作发生的时间，语态表示的主语和谓语之间的关系，二者相互独立，被动语态也有时态。</p><p>⑤不及物动词加介词一起构成谓语</p><p>Dreaming may not belong to the inconscious.</p><p>⑥We went to have a look at him</p><p>这句话实际上就是一个主谓结构，后面不定式表目的状语</p><h2 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h2><h3 id="1-什么是并列句："><a href="#1-什么是并列句：" class="headerlink" title="1.什么是并列句："></a>1.什么是并列句：</h3><p>就是用连词连接两个句子</p><h3 id="2-英语中常见的连词，副词，介词短语"><a href="#2-英语中常见的连词，副词，介词短语" class="headerlink" title="2.英语中常见的连词，副词，介词短语"></a>2.英语中常见的连词，副词，介词短语</h3><ul><li><p>平行：and, not only…but also…</p><p>​            similarly, equally, likewise, at the same time, in the meanwhile</p></li><li><p>转折：but, yet, while,whereas</p><p>​            however, nevertheness, on the contrary, conversely, unexpectedly, unfortunately, by contrast</p></li><li><p>选择：or, whether…or…</p><p>​           alternatively</p></li><li><p>因果：for, so</p><p>  ​           therefore, thus, consequently, as a result</p></li><li><p>递进：then</p><p>​           desides, furthermore, moreover, additionally, in addition,subsequently</p></li></ul><h3 id="3-并列句考点分析"><a href="#3-并列句考点分析" class="headerlink" title="3.并列句考点分析"></a>3.并列句考点分析</h3><p>①写作：只要上下句有逻辑关系就一定要用逻辑关系词（连词，副词，介词和介词短语） </p><h3 id="4-连词和其他关系词的区别"><a href="#4-连词和其他关系词的区别" class="headerlink" title="4.连词和其他关系词的区别"></a>4.连词和其他关系词的区别</h3><ul><li>使用连词时，前面可以加逗号，也可以不加.</li><li>其他的逻辑关系词前面要不加句号，要不加连词and.</li></ul><p>爱情已经不在了，但他还在留恋过去</p><p>Romance has evaporated, but he still misses the past.</p><p>Romance has evaporated, and on the contrary, he still misses the past.</p><p>Romance has evaporated . On the contrary, he still misses the past.</p><p>有朋自远方来，不亦乐乎</p><p>There exist an army of companies coming from distance, and consequently, l feel more than(=very) deligthted.</p><p>都说我如水百变，可知我清澈不变</p><p>  am claimed(认为) changeable like water. By contrast, my clarity keeps consistent.</p><p>你还记得那天吗？我没有通过四级考试，一个人在雨中哭泣，你走了过来，拍片我的肩膀，告诉我人生没有终点</p><p>Do you still keep that day in mind? l failed to pass CET4, and as a result, I shed tears in the rain alone. At te same time, you came up to me and subsequntly you beat my shoulder and told me there exists no destinantion in life</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> 长难句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化及常见问题</title>
      <link href="/2020/08/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/14/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><p>查看教程请点击<a herf="https://blog.csdn.net/victoryxa/article/details/103733655" target="_blank">此处&lt;\a&gt;</a></p><p>相关步骤补充<a herf="https://blog.csdn.net/cungudafa/article/details/106278206" target="_blank">传送门&lt;\a&gt;</a></p><h3 id="借鉴的模板"><a href="#借鉴的模板" class="headerlink" title="借鉴的模板"></a>借鉴的模板</h3><p>https://senqi666.gitee.io/</p><h3 id="动态背景设置"><a href="#动态背景设置" class="headerlink" title="动态背景设置"></a>动态背景设置</h3><p>https://qvchuang.top/archives/d3c10307.html</p><h3 id="底部访问数不显示问题"><a href="#底部访问数不显示问题" class="headerlink" title="底部访问数不显示问题"></a>底部访问数不显示问题</h3><p><a href="https://www.fanfff.cn/2019/07/30/exo搭建的常见问-keng-题-dian/" target="_blank" rel="noopener">https://www.fanfff.cn/2019/07/30/exo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE-keng-%E9%A2%98-dian/</a></p><h3 id="live2d搭建"><a href="#live2d搭建" class="headerlink" title="live2d搭建"></a>live2d搭建</h3><h4 id="安装npm包："><a href="#安装npm包：" class="headerlink" title="安装npm包："></a>安装npm包：</h4><p>npm install –save hexo-helper-live2d</p><h4 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h4><p>在_config.yml中添加如下配置：</p><p>live2d:<br>  enable: true<br>  scriptFrom: local<br>  pluginRootPath: live2dw/<br>  pluginJsPath: lib/<br>  pluginModelPath: assets/<br>  tagMode: false<br>  debug: false<br>  model:<br>    use: live2d-widget-model-shizuku<br>  display:<br>    position: right<br>    width: 150<br>    height: 300<br>  mobile:<br>    show: true</p><h4 id="下载模型："><a href="#下载模型：" class="headerlink" title="下载模型："></a>下载模型：</h4><p>npm install 名称<br>所有名称如下：<br>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><p>1.在hexo的根目录创建名为live2d_models的文件夹<br>2.把之前安装的模型文件夹从node_modules文件夹复制到live2d_models中<br>3.在hexo根目录下的_config.yml将其中的use: live2d-widget-model-shizuku改为自己所下载的名称</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>设置live2d时，记得运行hexo clean 命令，否则看不到看板娘的生效</p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>模型预览:<a href="https://huaji8.top/post/live2d-plugin-2.0/?spm=a2c4e.10696291.0.0.7b0119a4uQq4FG" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/?spm=a2c4e.10696291.0.0.7b0119a4uQq4FG</a><br>参考文献：<a href="https://mrlichangming.github.io/2018/10/24/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0live2d/" target="_blank" rel="noopener">https://mrlichangming.github.io/2018/10/24/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0live2d/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urllib补充</title>
      <link href="/2020/07/08/urllib%E8%A1%A5%E5%85%85/"/>
      <url>/2020/07/08/urllib%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h2 id="引入urllib包"><a href="#引入urllib包" class="headerlink" title="引入urllib包"></a>引入urllib包</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse</code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将打开网页的所有数据给一个对象</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;http.client.HTTPResponse object at 0x02E23BB0></span><span class="token comment" spellcheck="true">#读取对象里的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解码将2进制文件解析</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="获取一个post请求"><a href="#获取一个post请求" class="headerlink" title="获取一个post请求"></a>获取一个post请求</h2><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># data参数必须是一个字节文件（各种各样的信息）</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># post请求需要给一个data参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="获取一个get请求"><a href="#获取一个get请求" class="headerlink" title="获取一个get请求"></a>获取一个get请求</h2><pre class=" language-python"><code class="language-python">response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Time out!"</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parseurl <span class="token operator">=</span> <span class="token string">"https://www.douban.com"</span><span class="token comment" spellcheck="true"># 根据request header 添加信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 请求对象</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发出响应</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门</title>
      <link href="/2020/07/08/Python%E5%85%A5%E9%97%A8/"/>
      <url>/2020/07/08/Python%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>ListName = [成员1，成员2，成员3]</p><pre class=" language-python"><code class="language-python">Name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#遍历列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#结果：['A', 'B', 'C']</span><span class="token comment" spellcheck="true">#从0开始索引，-1返回最后一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：A</span><span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：C</span><span class="token comment" spellcheck="true">#在末尾添加元素</span>Name<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：['A', 'B', 'C', 'D']</span><span class="token comment" spellcheck="true">#在特定位置添加元素</span>Name<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'First'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：['First', 'A', 'B', 'C', 'D']</span><span class="token comment" spellcheck="true">#删除元素</span><span class="token keyword">del</span> Name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：['A', 'B', 'C', 'D']</span><span class="token comment" spellcheck="true">#根据位置删除元素</span>Name<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#结果：['A', 'C', 'D']</span><span class="token comment" spellcheck="true">#根据内容删除元素</span>Name<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#结果：['C', 'D']</span></code></pre><h3 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#永久排序</span>Name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">]</span>Name<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：['A', 'B', 'C', 'D']</span><span class="token comment" spellcheck="true">#临时排序</span>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：[1, 2, 3, 4, 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：[5, 4, 3, 2, 1]</span><span class="token comment" spellcheck="true">#反转列表</span>Color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Red'</span><span class="token punctuation">,</span><span class="token string">'Yelloe'</span><span class="token punctuation">,</span><span class="token string">'Blue'</span><span class="token punctuation">]</span>Color<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：['Blue', 'Yelloe', 'Red']</span><span class="token comment" spellcheck="true">#计算列表长度</span>number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：9</span></code></pre><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建数字列表</span>numbers <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>Num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果： [1, 4, 9, 16, 25, 36, 49, 64, 81]</span><span class="token comment" spellcheck="true">#统计计算</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：285</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：81</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：1</span><span class="token comment" spellcheck="true">#列表解析</span>squares <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果： [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></code></pre><h3 id="使用部分列表"><a href="#使用部分列表" class="headerlink" title="使用部分列表"></a>使用部分列表</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#切片</span>Num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>Num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果：[1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>Num<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果：[1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>Num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果：[4, 5, 6, 7, 8, 9]</span><span class="token comment" spellcheck="true">#遍历切片</span><span class="token keyword">for</span> number <span class="token keyword">in</span> Num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果：</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true">#复制列表</span>CopyNum <span class="token operator">=</span> Num<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>CopyNum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><pre class=" language-python"><code class="language-python">dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true">#错误：不能修改元组元素</span><span class="token comment" spellcheck="true">#遍历元组</span><span class="token keyword">for</span> dimension <span class="token keyword">in</span> dimensions<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dimension<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果：    </span><span class="token comment" spellcheck="true">#200</span><span class="token comment" spellcheck="true">#50</span></code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 访问字典</span>alien01 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'points'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien01<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'color': 'green', 'points': 5}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien01<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># green</span><span class="token comment" spellcheck="true"># 添加键值对应</span>alien01<span class="token punctuation">[</span><span class="token string">'x_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>alien01<span class="token punctuation">[</span><span class="token string">'y_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien01<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25}</span><span class="token comment" spellcheck="true"># 创建空字典</span>alien02 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>alien02<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'red'</span>alien02<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien02<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'color': 'red', 'points': 10}</span><span class="token comment" spellcheck="true"># 修改字典中的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien02<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'color': 'red', 'points': 10}</span>alien02<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien02<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'color': 'blue', 'points': 10}</span><span class="token comment" spellcheck="true"># 删除键值对应</span><span class="token keyword">del</span> alien02<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien02<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'color': 'blue'}</span><span class="token comment" spellcheck="true"># 遍历字典</span>user01 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'LTY'</span><span class="token punctuation">,</span>          <span class="token string">'first'</span><span class="token punctuation">:</span><span class="token string">'L'</span><span class="token punctuation">,</span>          <span class="token string">'last'</span><span class="token punctuation">:</span><span class="token string">'TY'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 遍历所有键值对应</span><span class="token keyword">for</span> a<span class="token punctuation">,</span>b <span class="token keyword">in</span> user01<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey:"</span><span class="token operator">+</span> a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Value:"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Key:name</span><span class="token comment" spellcheck="true"># Value:LTY</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Key:first</span><span class="token comment" spellcheck="true"># Value:L</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Key:last</span><span class="token comment" spellcheck="true"># Value:TY</span><span class="token comment" spellcheck="true"># 遍历所有键</span><span class="token keyword">for</span> c <span class="token keyword">in</span> user01<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey:"</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Key:name</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Key:first</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Key:last</span><span class="token comment" spellcheck="true"># 遍历所有值</span><span class="token keyword">for</span> d <span class="token keyword">in</span> user01<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nValue:"</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Value:LTY</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Value:L</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Value:TY</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决端口被占用</title>
      <link href="/2020/06/15/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
      <url>/2020/06/15/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>查看当前进程连接情况：netstat -ano</p><p>找到占用端口的软件</p><p><img src="/images/%E5%B0%8F%E9%97%AE%E9%A2%98/20190111092454349.png" alt></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>通过找到的进程号，然后就可以到<strong>任务管理器</strong>里面结束掉。</p><p><img src="/images/%E5%B0%8F%E9%97%AE%E9%A2%98/20190111095011158.png" alt></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/qq_41448272/article/details/86291156" target="_blank" rel="noopener">https://blog.csdn.net/qq_41448272/article/details/86291156</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2020/05/30/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/05/30/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><p><strong>加粗</strong><br><em>倾斜</em><br><strong><em>斜体加粗</em></strong><br><del>删除线</del><br>==高亮==<br>我是^上标^<br>我是<del>下标</del></p><h2 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h2><p>+一二三四五<br> +上山打老虎<br>  +老虎没打到</p><p>1.一二三四五<br>2.上山打老虎<br>3.老虎没打到</p><h2 id="4-表格"><a href="#4-表格" class="headerlink" title="4.表格"></a>4.表格</h2><p>(ctrl+T)</p><table><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table><h2 id="5-引用"><a href="#5-引用" class="headerlink" title="5.引用"></a>5.引用</h2><blockquote><p>一二三四五</p><blockquote><p>上山打老虎</p><blockquote><p>老虎没打到</p></blockquote></blockquote></blockquote><h2 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a>6.代码块</h2><p>(ctrl+shift+k)</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><img src="/images/markdown/markdown%E8%AF%AD%E6%B3%95.png" alt></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>用 “ - ” 代表实心圆点</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语法 </tag>
            
            <tag> markddown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门</title>
      <link href="/2020/05/27/Java%E5%85%A5%E9%97%A8/"/>
      <url>/2020/05/27/Java%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>1.this是一个引用，this是一个变量，this变量保存了内存地址并指向自身。<br>2.this出现在实例方法中代表当前执行这个方法的对象。<br><img src="/images/java/this%E5%85%B3%E9%94%AE%E5%AD%971.png" alt></p><p><img src="/images/java/this%E5%85%B3%E9%94%AE%E5%AD%972.png" alt></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>3.this不能使用在带有static的方法中。<br><img src="/images/java/this%E5%85%B3%E9%94%AE%E5%AD%973.png" alt></p><p><img src="/images/java/this%E5%85%B3%E9%94%AE%E5%AD%974.png" alt></p><h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><p>4.无法省略this的情况：<br>用来区分局部变量和实例变量时。</p><h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h3><p>5.通过当前构造方法调用其他构造方法<br><img src="/images/java/this%E5%85%B3%E9%94%AE%E5%AD%975.png" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/java/this%E5%85%B3%E9%94%AE%E5%AD%976.png" alt></p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="第一部分-1"><a href="#第一部分-1" class="headerlink" title="第一部分"></a>第一部分</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每一个对象的都不同</span>    <span class="token keyword">private</span> String ID<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每一个对象的都不同</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每一个对象的都相同</span>    <span class="token comment" spellcheck="true">//声明为实例对象太浪费空间</span>    <span class="token comment" spellcheck="true">//用static关键词转化为静态变量</span>    <span class="token comment" spellcheck="true">//静态变量在类加载的时候初始化，不需要创建对象</span>    <span class="token comment" spellcheck="true">//用类名.静态变量名来访问</span>    <span class="token comment" spellcheck="true">//所有static修饰的元素都是类级别特征，用类名.静态变量名来访问</span>    <span class="token keyword">static</span> String country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第二部分-1"><a href="#第二部分-1" class="headerlink" title="第二部分"></a>第二部分</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*1. 静态代码块     * static{     *  java语句；     * }     * 2.在类加载时执行，并且只加载一次     * 3.静态代码块在一个类中可以编写多个，并遵循自上而下顺序执行     */</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//运行结果:</span>    <span class="token comment" spellcheck="true">//类加载</span>    <span class="token comment" spellcheck="true">//main加载</span><span class="token punctuation">}</span></code></pre><h3 id="第三部分-1"><a href="#第三部分-1" class="headerlink" title="第三部分"></a>第三部分</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Testanother</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 方法什么时候定义为静态？     * （不属于某一个对象的动作了，不同的对象执行这     * 个动作结果是一样的，可以提升为类级别的动作）     *     * 静态方法中无法直接访问实例变量和实例方法     */</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println(i);//无法执行</span>        Testanother t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Testanother</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以访问</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a>方法覆盖</h2><h3 id="回顾java语言中的方法重载："><a href="#回顾java语言中的方法重载：" class="headerlink" title="回顾java语言中的方法重载："></a>回顾java语言中的方法重载：</h3><p>​    1.方法重载又称Overload<br>​    2.方法重载什么时候使用？<br>​        -在同一个类当中，方法完成的功能是类似的<br>​    3.什么条件满足构造方法重载？<br>​        -在同一个类当中<br>​        -方法名相同<br>​        -参数列表不同（类型，顺序，个数）<br>​    4.方法重载和什么无关？<br>​        -和方法的返回值无关<br>​        -和方法的修饰符列表无关</p><h3 id="关于java语言中的方法覆盖："><a href="#关于java语言中的方法覆盖：" class="headerlink" title="关于java语言中的方法覆盖："></a>关于java语言中的方法覆盖：</h3><p>​    1.方法覆盖又称为方法重写，Override<br>​    2.什么时候使用方法重写？<br>​        当父类方法无法满足子类需求<br>​        子类有必要将父类继承过来的方法重新编写<br>​        这个过程被称为方法重写<br>​    3.什么条件满足后会发生方法重写？<br>​        -重写发生在具有继承关系的父子类之间<br>​        -方法重写时：方法名相同，返回值类型相同，形参列表相同<br>​        -方法重写时：访问权限只能更高不能更低<br>​        -方法重写时：抛出异常不能更多，可以更少<br>​    4.注意：<br>​        -私有方法不能继承，所以不能覆盖<br>​        -构造方法不能继承，所以不能覆盖<br>​        -静态方法不存在覆盖<br>​        -覆盖只针对方法不谈属性</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//动物都可以移动</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物在移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//猫科类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫在走猫步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//飞禽类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//覆盖的是Bird当中的move方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟在飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YingWu</span> <span class="token keyword">extends</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鹦鹉飞不起起来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建动物对象</span>        Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建猫科类动物对象</span>        Cat c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建飞禽类动物对象</span>        Bird b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        YingWu y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YingWu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 运行结果： * 动物在移动 * 猫在走猫步 * 鸟在飞翔 * 鹦鹉飞不起起来 */</span></code></pre><h2 id="String常用类"><a href="#String常用类" class="headerlink" title="String常用类"></a>String常用类</h2><h3 id="字符串一旦创建不可变"><a href="#字符串一旦创建不可变" class="headerlink" title="字符串一旦创建不可变"></a>字符串一旦创建不可变</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//s1是一个引用指向abc</span>String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以让s1重新指向吗？</span><span class="token comment" spellcheck="true">//s1是局部变量无final可以指向</span><span class="token comment" spellcheck="true">//但字符串本身不可变</span>s1 <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span></code></pre><h2 id="提高字符串访问效率（缓存技术）"><a href="#提高字符串访问效率（缓存技术）" class="headerlink" title="提高字符串访问效率（缓存技术）"></a>提高字符串访问效率（缓存技术）</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//所有用“双引号”括起来的字符串都会在“字符串缓存池”中创建一份</span><span class="token comment" spellcheck="true">//如果程序用到某个字串符，程序会去字符串缓存池中搜索该字符</span><span class="token comment" spellcheck="true">//如果没有找到则会在其中新建该字符串，如果找到了则直接拿来用</span>String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//比较两个字符是否相等，不能用 “==” 要用equals方法</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只会在字符串常量池中创建“abc”对象</span>String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会在字符串常量池中创建“Hello”对象也会在堆中创建一个字符串对象</span><span class="token comment" spellcheck="true">//第二种比较浪费内存</span></code></pre><h3 id="常用构造方法"><a href="#常用构造方法" class="headerlink" title="常用构造方法"></a>常用构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.</span>        String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//abc</span>        <span class="token comment" spellcheck="true">//4.</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'我'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'国'</span><span class="token punctuation">,</span><span class="token string">'人'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我是中国人</span>        <span class="token comment" spellcheck="true">//5.</span>        String s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//bc</span>        <span class="token comment" spellcheck="true">//6.</span>        String s6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中国</span>    <span class="token punctuation">}</span></code></pre><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//char charAt(int index)</span><span class="token comment" spellcheck="true">//返回指定索引处的char值</span>String s1 <span class="token operator">=</span> <span class="token string">"你好世界"</span><span class="token punctuation">;</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//世</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//boolean endsWith(String endstr)</span> String s1 <span class="token operator">=</span> <span class="token string">"你好世界"</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"你好世界"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"好世界"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"世界"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"界"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"界 "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//boolean equalsIgnoreCase(String anotherString)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"AbC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//int IndexOf(String str)</span><span class="token comment" spellcheck="true">//第一次出现str的索引</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://192.168.1.100:8080/oa"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"/oa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//int IndexOf(String str,int fromIndex)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://192.168.1.100:8080/oa/http/oa"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"/oa"</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//33</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//int laseIndexOf(String str)</span><span class="token comment" spellcheck="true">//最后一次出现str的索引</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://192.168.1.100:8080/oa/oa"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/oa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//28</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//int laseIndexOf(String str,int fromIndex)</span><span class="token comment" spellcheck="true">//反向搜索</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://192.168.1.100:8080/oa/oa"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/oa"</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//25</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//int length</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://192.168.1.100:8080/oa"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//28</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//String replaceAll (String s1,String s2)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好世界你好世界"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">,</span><span class="token string">"你好 "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//你好 世界你好 世界</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//String[] split(String s)</span>String myTime <span class="token operator">=</span> <span class="token string">"2001,06,10"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ymd <span class="token operator">=</span> myTime<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ymd<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ymd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2001</span><span class="token comment" spellcheck="true">//06</span><span class="token comment" spellcheck="true">//10</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//boolean startsWith(String s)</span>String s1 <span class="token operator">=</span> <span class="token string">"你好世界"</span><span class="token punctuation">;</span>String s1 <span class="token operator">=</span> <span class="token string">"你好世界"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"你好世界"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"你好世"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">" 你"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转换成大写</span><span class="token comment" spellcheck="true">//转换小写</span><span class="token comment" spellcheck="true">//消除前后空白</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABCDEabcde"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ABCDEABCDE</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABCDEabcde"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//abcdeabcde</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"            ABCDEabcde           "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ABCDEabcde</span></code></pre><h3 id="StringBuffer-和-StringBuilder"><a href="#StringBuffer-和-StringBuilder" class="headerlink" title="StringBuffer 和 StringBuilder"></a>StringBuffer 和 StringBuilder</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//StringBuffer 和 StringBuilder默认初始化容量为16</span><span class="token comment" spellcheck="true">//StringBuffer 和 StringBuilder底层是一个char数组，可以扩容</span><span class="token comment" spellcheck="true">//优化：在创建之前，预测存储字符数量，然后在创建之时采用指定初始化容量创建</span><span class="token comment" spellcheck="true">//字符串拼接建议使用 StringBuffer </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建字符串缓冲区对象</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//16</span>        <span class="token comment" spellcheck="true">//追加字符串</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> ins <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">,</span><span class="token string">"dd"</span><span class="token punctuation">}</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ins<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>ins<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//aa,bb,cc,dd</span><span class="token punctuation">}</span></code></pre><h3 id="StringBuffer-和-StringBuilder区别"><a href="#StringBuffer-和-StringBuilder区别" class="headerlink" title="StringBuffer 和 StringBuilder区别"></a>StringBuffer 和 StringBuilder区别</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// StringBuffer是线程安全的（可以在多线程的环境下使用不会出现问题）</span><span class="token comment" spellcheck="true">//StringBuilder是非线程安全的（在多线程环境下使用可能会出现问题）</span></code></pre><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>1.数组是一种引用类型</p><p>2.数组长度不可改变</p><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object o3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">,</span>o3<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取数组内元素个数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*执行效果100200300400*/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改元素</span>a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*执行效果100100300400*/</span></code></pre><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> z1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> z1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>z1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>z1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>z1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> z1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//21 22 23</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>index <span class="token operator">&lt;</span> objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object o <span class="token operator">=</span> objs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span>    <span class="token comment" spellcheck="true">//o.toString();//空指针异常</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null null null</span><span class="token punctuation">}</span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1.继承是面向对象的三大基本特征：封装，继承，多态<br>2.继承的基本作用：代码的复用<br>3.继承最重要的作用：方法覆盖，多态机制的基础<br>4.语法格式：<br>    [修饰符列表] class 类名 extends 父类名｛<br>        类体 = 属性 + 方法<br>    ｝</p><p>5.关于继承中的一些术语：<br>    B类中继承A类，其中：<br>        A类称为：父类，基类，超累，superclass<br>        B类称为：子类，派生类，subclass<br>6.java语言中子类继承父类继承的都是那些数据？<br>    -私有的不支持继承<br>    -构造方法不支持继承<br>    -其他数据都可以被继承<br>7.虽然java只支持单继承，但一个类可以间接继承其它类<br>8.假设一个类没有显示任何类，则默认继承java.lang.Object类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String actno<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Account</span><span class="token punctuation">(</span>String actno<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getActno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> actno<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setActno</span><span class="token punctuation">(</span>String actno<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreditAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Account</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> credit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CreditAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> credit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCredit</span><span class="token punctuation">(</span><span class="token keyword">double</span> credit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>credit <span class="token operator">=</span> credit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtentsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CreditAccount act <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        act<span class="token punctuation">.</span><span class="token function">setCredit</span><span class="token punctuation">(</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        act<span class="token punctuation">.</span><span class="token function">setActno</span><span class="token punctuation">(</span><span class="token string">"act-001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        act<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>act<span class="token punctuation">.</span><span class="token function">getActno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> act<span class="token punctuation">.</span><span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> act<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的语法"><a href="#多态的语法" class="headerlink" title="多态的语法"></a>多态的语法</h3><h4 id="创建父类"><a href="#创建父类" class="headerlink" title="创建父类"></a>创建父类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动物类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物在移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建子类"><a href="#创建子类" class="headerlink" title="创建子类"></a>创建子类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//猫类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫在走猫步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不是从父类中继承的方法</span>    <span class="token comment" spellcheck="true">//子类对象特有的行为</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫捉老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//鸟类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿在飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *关于java语言当中的多态机制 *  1.Animal,Bird,Cat三个类的关系： *      Cat继承Animal *      Bird继承Animal *      Cat和Bird无任何继承关系 * *  2.面向对象三大特征：封装，继承，多态 * *  3.关于多态中涉及到的概念： *     -向上转型（upcasting） *          子类型转化为父类型 *          又被称为：自动类型转换 * *     -向下转型(downcasting) *          子类型转化为父类型 *          又被称为：强制类型转换【需要加强制类型转换符】 * *     -无论是向上还是向下转型，两种类型之间必须有继承关系 *      没有继承关系程序没法编译通过 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//以前编写的程序</span>        Animal a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bird b1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用多态语法机制</span>        <span class="token comment" spellcheck="true">/**         * 1.Animal与 Cat之间存在继承关系，Animal是父类，Cat是子类         *          * 2.Cat is an animal         *          * 3.new Cat()创建的的对象的类型是Cat, a2这个引用的数据类型是Animal,可见它进行了类型转换         *  子类型转换为父类型，称为向上转型/upcasting,或称为自动类型转换。         *           * 4.JAVA中允许这种语法：父类型引用指向子类型对象         */</span>        Animal a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 1.编译阶段 + 运行阶段         *         * 2.先分析编译阶段，再分析运行阶段，编译无法通过，根本是无法运行的。         *         * 3.编译阶段编译器检查 a2这个引用的数据类型是Animal,         *   由于Animal.class字节码当中有move()方法，所以编译通过了         *   这个过程我们称为静态绑定，编译阶段绑定，只有静态绑定成功后才有后续的运行         *         * 4.运行阶段，JVM堆内存中真实创建的对象是Cat对象，那么以下程序在运行阶段一定会         *   调用Cat对象的move（）方法，此时发生的是动态绑定，运行阶段绑定。         *         * 5.无论Cat类有没有重写move方法，运行阶段一定调用的是Cat对象的move方法。         *         * 6.父类型引用指向子类型对象这种机制导致程序在编译阶段和运行阶段绑定两种不同的形态/状态，         *   这种机制可以称为动态语法机制。         */</span>        a2<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//猫在走猫步</span>        <span class="token comment" spellcheck="true">/**         * 分析以下程序为什么不能调用？         *      因为编译阶段编译器检查 a2这个引用的数据类型是Animal,         *      从Animal.class字节码文件当中查找catchMouse()方法，         *      最终没找到该方法，导致静态绑定失败，没有绑定成功，         *      也就是说编译失败，更别谈运行了         * a2.catchMouse();         */</span>        <span class="token comment" spellcheck="true">/**         * 需求：         *      想让 new Cat()执行catchMouse()方法，怎么办？         *      可以将a2强制转换为Cat类型         *      a2的类型是Animal(父类)，转换为Cat类型（子类），被称为向下转型/downcasting/强制了类型转换         *         *什么时候向下转型？         *      当调用的方法是子类型中特有的，在父类型当中不存在，必须向下转型         */</span>        Cat c2 <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a2<span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//猫捉老鼠</span>        Animal a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Cat c3 = (Cat)a3;</span>        <span class="token comment" spellcheck="true">/**         * Exception in thread "main" java.lang.ClassCastException: Bird cannot be cast to Cat         *     at Test.main(Test.java:82)         * 1.编译没有问题         *          * 2.运行阶段会出现异常，因为JVM堆内存中真实存在的对象是Bird类型，两种类型之间无继承关系，所有         *   Bird对象无法转换为Cat对象         *      java.lang.ClassCastException         *      类型转换异常，这种异常总是在“向下转型”时发生。         *               * 3.向下转型存在隐患（编译通过，运行出错）         *   向上转型编译通过，运行一定没问题         *   向下转型编译通过，运行可能出问题         *            * 4.如何避免java.lang.ClassCastException？         *   使用instanceof运算符可以避免以上异常。         *   4.1语法规则：         *          （引用 instanceof 数据类型名）         *   4.2执行结果：true/false         *   4.3关于true/false:         *      假设：a instanceof Animal         *      true:a 这个引用指向的对象是一个Animal类型         *      false:a 这个引用指向的对象不是一个Animal类型         *               * 5.强制类型转换之前，建议用instanceof判断         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a3 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Cat c3 <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a3<span class="token punctuation">;</span>            c3<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a3 <span class="token keyword">instanceof</span> <span class="token class-name">Bird</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Bird b2 <span class="token operator">=</span> <span class="token punctuation">(</span>Bird<span class="token punctuation">)</span>a3<span class="token punctuation">;</span>            b2<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h3><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 以主人喂养宠物为例： * 1.分析：主人【类】 *          -喂宠物 *        宠物【类】 *          -吃东西 * * 2.多态作用： * 降低耦合度低，提高扩展力 * * 核心：面向抽象编程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Master m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小狗正在啃骨头</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小猫正在吃鱼</span>        m<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//蛇吞象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建宠物类"><a href="#创建宠物类" class="headerlink" title="创建宠物类"></a>创建宠物类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建子类-1"><a href="#创建子类-1" class="headerlink" title="创建子类"></a>创建子类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"蛇吞象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//小猫爱吃鱼</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫正在吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//小狗爱吃骨头</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗正在啃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建主人类"><a href="#创建主人类" class="headerlink" title="创建主人类"></a>创建主人类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//主人可以喂养宠物</span>    <span class="token comment" spellcheck="true">//主人面向的使抽象的Pet,不再面向具体的宠物</span>    <span class="token comment" spellcheck="true">//面向抽象编程：耦合度低，扩展性强</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span>Pet pet<span class="token punctuation">)</span><span class="token punctuation">{</span>        pet<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="1-异常是什么"><a href="#1-异常是什么" class="headerlink" title="1.异常是什么"></a>1.异常是什么</h3><p>第一，异常模拟的是真实世界中“不正常的事件”。</p><p>第二，java采用类去模拟异常。</p><p>第三，类是可以创建对象的。</p><p>eg.NullPointerException e = 0x1234</p><p>e是一个引用类型</p><p>e中保存的内存地址指向NullPointerException类型对象</p><p>NullPointerException是一类异常，这个对象是一个异常事件</p><p>抢劫是一个异常，而张三被抢劫就是一个异常事件</p><h3 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h3><p>程序发生异常事件后，为我们提供详细的信息，使程序更加健壮</p><h3 id="异常的继承结构"><a href="#异常的继承结构" class="headerlink" title="异常的继承结构"></a>异常的继承结构</h3><p>Object</p><blockquote><p>Throwable (所有的异常都可抛出)</p><blockquote><p>Error (没办法处理，只能退出JVM)</p><p>Exception （可处理，若不处理会退出JVM）</p><blockquote><p>RunTimeException (所有RunTimeException的直接子类都是运行时异常)</p><p>编译时异常（所有Exception的直接子类）</p></blockquote></blockquote></blockquote><h3 id="throws关键字处理异常"><a href="#throws关键字处理异常" class="headerlink" title="throws关键字处理异常"></a>throws关键字处理异常</h3><p>在方法声明的位置使用throws关键字向上抛出异常</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建文件输入流，读取文件</span>        FileInputStream fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>运行结果</p><pre class=" language-java"><code class="language-java">未报告的异常错误java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span> 必须对其进行捕获或声明以便抛出<span class="token comment" spellcheck="true">//这是编译时异常</span></code></pre><p>使用throws关键字</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//public static void main(String[] args) throws IOException</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建文件输入流，读取文件</span>        FileInputStream fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用throws处理异常不是真正的处理异常而是推卸责任，谁调用抛给谁</p><p>运行结果</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token operator">:</span> c<span class="token operator">:</span>\ab<span class="token punctuation">.</span><span class="token function">txt</span> <span class="token punctuation">(</span>系统找不到指定的文件。<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">.</span><span class="token function">open0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">195</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>FileInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">138</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>FileInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">)</span>    at ExceptionTest01<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>ExceptionTest01<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span></code></pre><p>后续代码不执行因为JVM遇到这个异常后会退出JVM</p><h3 id="try…catch…关键字处理异常"><a href="#try…catch…关键字处理异常" class="headerlink" title="try…catch…关键字处理异常"></a>try…catch…关键字处理异常</h3><p>语法</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可能出现异常的代码</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">//异常类型1 变量){</span>            <span class="token comment" spellcheck="true">//处理异常的代码}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">//异常类型2 变量){</span>            <span class="token comment" spellcheck="true">//处理异常的代码}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            FileInputStream fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fils<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>FileNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编译无法通过</span><span class="token comment" spellcheck="true">//未报告的异常错误java.io.IOException; 必须对其进行捕获或声明以便抛出</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            FileInputStream fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fils<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>FileNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编译通过     </span></code></pre><p>catch可以写多个但必须从上到下，从小类型到大类型异常捕捉</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            FileInputStream fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fils<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//大类型</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>FileNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//小类型</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//已捕获到异常错误java.io.FileNotFoundException</span></code></pre><p>try…catch只要捕捉到一个异常，处理之后就结束了</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            FileInputStream fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fils<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>FileNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其他IO异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取文件不存在</span> <span class="token comment" spellcheck="true">//Hello World</span></code></pre><h3 id="finally语句快"><a href="#finally语句快" class="headerlink" title="finally语句快"></a>finally语句快</h3><p>finally语句块可以和try…catch…语句块连用</p><p>finally语句块重的代码一定会执行</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            FileInputStream fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//不会执行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"TTT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//执行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>只要在finally语句块之前退出JVM，则finally语句块不会执行</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//退出JVM</span>           System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不执行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>一般在finally语句块中释放资源</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileInputStream fils <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            fils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>FileNotFoundException e<span class="token punctuation">)</span><span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fils<span class="token operator">!=</span>null<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                fils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e <span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  关于静态内部类 *  1.静态内部类可以等同看做静态变量 * *  内部类的作用：可以访问外部类中的私有数据 * *  2.静态内部类可以直接访问外部类的静态数据，无法直接访问成员（变量，方法） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo01</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">static</span> String s1 <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">private</span> String s2 <span class="token operator">=</span> <span class="token string">"B"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态的m1方法执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员方法m2执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态内部类</span>    <span class="token comment" spellcheck="true">//可以用访问控制权限的修饰符修饰</span>    <span class="token comment" spellcheck="true">//public,protected,private,缺省</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义静态方法</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(s2);</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//m2();</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//成员方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(s2);</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//m2();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行m3</span>        demo01<span class="token punctuation">.</span>InnerClass<span class="token punctuation">.</span><span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行m4</span>        InnerClass inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">demo01<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//运行结果：</span>        <span class="token comment" spellcheck="true">//A</span>        <span class="token comment" spellcheck="true">//静态的m1方法执行！</span>        <span class="token comment" spellcheck="true">//A</span>        <span class="token comment" spellcheck="true">//静态的m1方法执行！</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  关于成员内部类 *  1.成员内部类可以等同看做成员变量 * *  2.成员内部类不能有静态声明 * *  3.成员内部类可以访问外部类所有的数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo02</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">static</span> String s1 <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员变量</span>    <span class="token keyword">private</span> String s2 <span class="token operator">=</span> <span class="token string">"B"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态的m1方法执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员方法m2执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员内部类</span>    <span class="token comment" spellcheck="true">//可以用访问控制权限的修饰符修饰</span>    <span class="token comment" spellcheck="true">//public,protected,private,缺省</span>    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不能定义静态方法</span>        <span class="token comment" spellcheck="true">//成员方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       demo02 demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       InnerClass inner <span class="token operator">=</span> demo<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       inner<span class="token punctuation">.</span><span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//运行结果：</span>        <span class="token comment" spellcheck="true">//A</span>        <span class="token comment" spellcheck="true">//B</span>        <span class="token comment" spellcheck="true">//静态的m1方法执行！</span>        <span class="token comment" spellcheck="true">//成员方法m2执行！</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 局部内部类等同于局部变量 * * 重点：局部内部类在访问局部变量时，局部变量要用final修饰。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//局部内部类</span>        <span class="token comment" spellcheck="true">//局部内部类不能用访问权限修饰符修饰</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内部类不能有静态声明</span>            <span class="token comment" spellcheck="true">//public static void m1(){}</span>            <span class="token comment" spellcheck="true">//成员方法</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用m2</span>        InnerClass inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        demo03 oc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">demo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//运行结果：</span>        <span class="token comment" spellcheck="true">//10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 匿名内部类：指的是类没有名字 * * 优点：少用一个类 * 缺点：无法重复使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo04</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>CustomerService cs<span class="token punctuation">)</span><span class="token punctuation">{</span>        cs<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用test方法</span>        <span class="token comment" spellcheck="true">/**         *  demo04.test(new CustomerServiceimp());         *         运行结果：         *         系统已安全退出         */</span>        <span class="token comment" spellcheck="true">//使用匿名内部类执行test方法</span>        <span class="token comment" spellcheck="true">//new CustomerService()｛｝就是匿名内部类</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统已安全退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//运行结果：</span>        <span class="token comment" spellcheck="true">//       系统已安全退出</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//接口：</span><span class="token keyword">interface</span>  <span class="token class-name">CustomerService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//退出系统</span>    <span class="token keyword">void</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//编写一个类实现CustomerService接口</span><span class="token comment" spellcheck="true">/** * class CustomerServiceimp implements  CustomerService{ * *     @Override *     public void logout() { *         System.out.println("系统已安全退出"); *     } * } */</span></code></pre><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="抽象类语法"><a href="#抽象类语法" class="headerlink" title="抽象类语法"></a>抽象类语法</h3><p>1.如何定义抽象类：</p><p>class关键字前加 abstract</p><p>2.抽象类无法被实例化</p><p>3.抽象类也有构造方法，该构造方法给子类创建对象用的</p><p>4.抽象方法的语法：在方法的修饰符列表中添加 abstract 关键字，并且以“；”结束，不带有“{}”</p><p>5.抽象类中不一定有抽象方法，但抽象方法必须出现在抽象类中</p><p>6.一个非抽象类继承抽象类，必须把抽象类中的抽象方法覆盖，实现，重写。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 1.如何定义抽象类： *    class关键字前加 abstract * 2.抽象类无法被实例化 * 3.抽象类也有构造方法，该构造方法给子类创建对象用的 * 4.抽象方法的语法：在方法的修饰符列表中添加 abstract 关键字，并且以“；”结束，不带有“{}” * 5.抽象类中不一定有抽象方法，但抽象方法必须出现在抽象类中 * 6.一个非抽象类继承抽象类，必须把抽象类中的抽象方法覆盖，实现，重写。 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Abstract</span> <span class="token punctuation">{</span>    <span class="token function">Abstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//抽象类无法创建对象</span>        <span class="token comment" spellcheck="true">//Abstract a = new Abstract();</span>        <span class="token comment" spellcheck="true">//多态</span>        Abstract a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Abstract</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父类构造方法虽然调用了，但并没有创建父类对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="接口的基本语法"><a href="#接口的基本语法" class="headerlink" title="接口的基本语法"></a>接口的基本语法</h2><p>1.如何定义接口：<br>    [修饰符] interface 接口名()<br>2.接口中只能出现：常量,抽象方法<br>3.接口是一个特殊的抽象类，接口是完全抽象的。<br>4.接口中无构造方法，接口无法被实例化。<br>5.接口和接口之间可以多继承<br>6.一个类可以实现多个接口（等同于继承）<br>7.一个非抽象的类实现接口，需要将接口中的所有方法（实现/覆盖/重写）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//常量（必须用final修饰）</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String  SUCCESS <span class="token operator">=</span> <span class="token string">"success"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public static final可以省略</span>        <span class="token keyword">byte</span> MAX_VALUE <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//抽象方法（接口中所有的抽象方法都是public abstract）</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public abstract可以省略</span>        <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//多继承</span>    <span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">C</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span>  <span class="token class-name">D</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//implements是实现的意思，是一个关键字</span>    <span class="token comment" spellcheck="true">//implements和extents意义相同</span>    <span class="token comment" spellcheck="true">//MyClass不是抽象类</span>    <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span>  <span class="token class-name">B</span><span class="token punctuation">,</span>C<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//E继承B,C,D默认其中有method1,2,3外加其本身method4</span>    <span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token keyword">implements</span> <span class="token class-name">E</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h3><p>1.使项目分层，所有层都面向接口开发，开发效率提高</p><p>2.接口使代码和代码之间耦合度降低，可以随意切换</p><h3 id="接口代码"><a href="#接口代码" class="headerlink" title="接口代码"></a>接口代码</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 客户业务接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个退出系统的方法</span>    <span class="token keyword">void</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="面向接口实现类"><a href="#面向接口实现类" class="headerlink" title="面向接口实现类"></a>面向接口实现类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 编写接口的实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerServiceImp</span> <span class="token keyword">implements</span> <span class="token class-name">CustomerService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对接口中的抽象方法进行实现</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功退出系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行logout()方法</span>        <span class="token comment" spellcheck="true">//以下程序面向接口调用</span>        <span class="token comment" spellcheck="true">//编译看左边，运行看右边</span>        CustomerService  cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerServiceImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多态</span>        <span class="token comment" spellcheck="true">//调用</span>        cs<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 汽车和发动机之间的接口 * 生产汽车的厂家面对接口生产 * 生产发动机的厂家面对接口生产 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所有发动机都可以启动</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YAMAHA</span> <span class="token keyword">implements</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"YAMAHA启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HONDA</span> <span class="token keyword">implements</span> <span class="token class-name">Engine</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HONDA启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生产汽车</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//引擎</span>    <span class="token comment" spellcheck="true">//面向接口编程</span>    Engine e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Constructor</span>    <span class="token function">Car</span><span class="token punctuation">(</span>Engine e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试引擎</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生产引擎</span>        YAMAHA e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YAMAHA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生产汽车</span>        Car c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//测试引擎</span>        c<span class="token punctuation">.</span><span class="token function">testEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//换HONDA</span>        c<span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HONDA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>接口和抽象类都能完成某个功能，优先选择接口</p><p>因为接口可以多实现，多继承</p><p>并且一个类除了实现接口之外还呢个去继承其他类</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语法 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
